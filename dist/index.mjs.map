{"version":3,"sources":["../src/routeHandlerBuilder.ts","../src/createZodRoute.ts"],"sourcesContent":["import z from 'zod';\n\nimport type {\n  HandlerFormData,\n  HandlerFunction,\n  HandlerServerErrorFn,\n  MiddlewareFunction,\n  MiddlewareResult,\n  NextFunction,\n  OriginalRouteHandler,\n  OriginalRouteResponse,\n} from './types';\n\n/**\n * Type of the middleware function passed to a safe action client.\n */\nexport type MiddlewareFn<TContext, TReturnType, TMetadata = unknown> = {\n  (opts: { context: TContext; request: Request; metadata?: TMetadata }): Promise<TReturnType>;\n};\n\nexport class InternalRouteHandlerError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InternalRouteHandlerError';\n  }\n}\n\nexport class RouteHandlerBuilder<\n  TParams extends z.ZodType = z.ZodType,\n  TQuery extends z.ZodType = z.ZodType,\n  TBody extends z.ZodType = z.ZodType,\n  TContext = {},\n  TMetadata extends z.ZodType = z.ZodType,\n> {\n  readonly config: {\n    paramsSchema: TParams;\n    querySchema: TQuery;\n    bodySchema: TBody;\n    metadataSchema?: TMetadata;\n  };\n\n  readonly middlewares: Array<\n    MiddlewareFunction<\n      z.output<TParams>,\n      z.output<TQuery>,\n      z.output<TBody>,\n      TContext,\n      Record<string, unknown>,\n      z.output<TMetadata>\n    >\n  >;\n\n  readonly handleServerError?: HandlerServerErrorFn;\n  readonly handleFormData?: HandlerFormData;\n  readonly metadataValue?: z.output<TMetadata>;\n  readonly contextType!: TContext;\n\n  constructor({\n    config = {\n      paramsSchema: undefined as unknown as TParams,\n      querySchema: undefined as unknown as TQuery,\n      bodySchema: undefined as unknown as TBody,\n      metadataSchema: undefined as unknown as TMetadata,\n    },\n    middlewares = [],\n    handleServerError,\n    handleFormData,\n    contextType,\n    metadataValue,\n  }: {\n    config?: {\n      paramsSchema: TParams;\n      querySchema: TQuery;\n      bodySchema: TBody;\n      metadataSchema?: TMetadata;\n    };\n    middlewares?: Array<\n      MiddlewareFunction<\n        z.output<TParams>,\n        z.output<TQuery>,\n        z.output<TBody>,\n        TContext,\n        Record<string, unknown>,\n        z.output<TMetadata>\n      >\n    >;\n    handleServerError?: HandlerServerErrorFn;\n    handleFormData?: HandlerFormData;\n    contextType: TContext;\n    metadataValue?: z.output<TMetadata>;\n  }) {\n    this.config = config;\n    this.middlewares = middlewares;\n    this.handleServerError = handleServerError;\n    this.handleFormData = handleFormData;\n    this.contextType = contextType as TContext;\n    this.metadataValue = metadataValue;\n  }\n\n  /**\n   * Define the schema for the params\n   * @param schema - The schema for the params\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  params<T extends z.ZodType>(schema: T) {\n    return new RouteHandlerBuilder<T, TQuery, TBody, TContext, TMetadata>({\n      config: { ...this.config, paramsSchema: schema },\n      middlewares: this.middlewares as unknown as Array<\n        MiddlewareFunction<\n          z.output<T>,\n          z.output<TQuery>,\n          z.output<TBody>,\n          TContext,\n          Record<string, unknown>,\n          z.output<TMetadata>\n        >\n      >,\n      handleServerError: this.handleServerError,\n      handleFormData: this.handleFormData,\n      contextType: this.contextType,\n      metadataValue: this.metadataValue,\n    });\n  }\n\n  /**\n   * Define the schema for the query\n   * @param schema - The schema for the query\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  query<T extends z.ZodType>(schema: T) {\n    return new RouteHandlerBuilder<TParams, T, TBody, TContext, TMetadata>({\n      config: { ...this.config, querySchema: schema },\n      middlewares: this.middlewares as unknown as Array<\n        MiddlewareFunction<\n          z.output<TParams>,\n          z.output<T>,\n          z.output<TBody>,\n          TContext,\n          Record<string, unknown>,\n          z.output<TMetadata>\n        >\n      >,\n      handleServerError: this.handleServerError,\n      handleFormData: this.handleFormData,\n      contextType: this.contextType,\n      metadataValue: this.metadataValue,\n    });\n  }\n\n  /**\n   * Define the schema for the body\n   * @param schema - The schema for the body\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  body<T extends z.ZodType>(schema: T) {\n    return new RouteHandlerBuilder<TParams, TQuery, T, TContext, TMetadata>({\n      config: { ...this.config, bodySchema: schema },\n      middlewares: this.middlewares as unknown as Array<\n        MiddlewareFunction<\n          z.output<TParams>,\n          z.output<TQuery>,\n          z.output<T>,\n          TContext,\n          Record<string, unknown>,\n          z.output<TMetadata>\n        >\n      >,\n      handleServerError: this.handleServerError,\n      handleFormData: this.handleFormData,\n      contextType: this.contextType,\n      metadataValue: this.metadataValue,\n    });\n  }\n\n  /**\n   * Define the schema for the metadata\n   * @param schema - The schema for the metadata\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  defineMetadata<T extends z.ZodType>(schema: T) {\n    return new RouteHandlerBuilder<TParams, TQuery, TBody, TContext, T>({\n      config: { ...this.config, metadataSchema: schema },\n      middlewares: this.middlewares as unknown as Array<\n        MiddlewareFunction<\n          z.output<TParams>,\n          z.output<TQuery>,\n          z.output<TBody>,\n          TContext,\n          Record<string, unknown>,\n          z.output<T>\n        >\n      >,\n      handleServerError: this.handleServerError,\n      handleFormData: this.handleFormData,\n      contextType: this.contextType,\n      metadataValue: undefined,\n    });\n  }\n\n  /**\n   * Set the metadata value for the route handler\n   * @param value - The metadata value that will be passed to middlewares\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  metadata(value: z.output<TMetadata>) {\n    return new RouteHandlerBuilder<TParams, TQuery, TBody, TContext, TMetadata>({\n      ...this,\n      metadataValue: value,\n    });\n  }\n\n  /**\n   * Add a middleware to the route handler\n   * @param middleware - The middleware function to be executed\n   * @returns A new instance of the RouteHandlerBuilder\n   */\n  use<TNestContext extends Record<string, unknown>>(\n    middleware: MiddlewareFunction<\n      z.output<TParams>,\n      z.output<TQuery>,\n      z.output<TBody>,\n      TContext,\n      TNestContext,\n      z.output<TMetadata>\n    >,\n  ) {\n    return new RouteHandlerBuilder<TParams, TQuery, TBody, TContext & TNestContext, TMetadata>({\n      ...this,\n      middlewares: [...this.middlewares, middleware],\n      contextType: {} as TContext & TNestContext,\n    });\n  }\n\n  /**\n   * Create the handler function that will be used by Next.js\n   * @param handler - The handler function that will be called when the route is hit\n   * @returns The original route handler that Next.js expects with the validation logic\n   */\n  handler<TReturn>(\n    handler: HandlerFunction<\n      z.output<TParams>,\n      z.output<TQuery>,\n      z.output<TBody>,\n      TContext,\n      z.output<TMetadata>,\n      TReturn\n    >,\n  ): OriginalRouteHandler<Promise<OriginalRouteResponse<Awaited<TReturn>>>> {\n    return async (request, context): Promise<OriginalRouteResponse<Awaited<TReturn>>> => {\n      try {\n        const url = new URL(request.url);\n        let params: unknown = context?.params ? await context.params : {};\n        let query: unknown = Object.fromEntries(\n          [...url.searchParams.keys()].map((key) => {\n            const values = url.searchParams.getAll(key);\n            return values.length === 1 ? [key, values[0]] : [key, values];\n          }),\n        );\n        let metadata = this.metadataValue;\n\n        // Support both JSON and FormData parsing\n        let body: unknown = {};\n        if (request.method !== 'GET' && request.method !== 'DELETE') {\n          try {\n            const contentType = request.headers.get('content-type') || '';\n            if (\n              contentType.includes('multipart/form-data') ||\n              contentType.includes('application/x-www-form-urlencoded')\n            ) {\n              const formData = await request.formData();\n              body = this.handleFormData ? this.handleFormData(formData) : Object.fromEntries(formData.entries());\n            } else {\n              body = await request.json();\n            }\n          } catch (error) {\n            if (this.config.bodySchema) {\n              throw new InternalRouteHandlerError(JSON.stringify({ message: 'Invalid body', errors: error }));\n            }\n          }\n        }\n\n        // Validate the params against the provided schema\n        if (this.config.paramsSchema) {\n          const paramsResult = this.config.paramsSchema.safeParse(params);\n          if (!paramsResult.success) {\n            throw new InternalRouteHandlerError(\n              JSON.stringify({ message: 'Invalid params', errors: paramsResult.error.issues }),\n            );\n          }\n          params = paramsResult.data;\n        }\n\n        // Validate the query against the provided schema\n        if (this.config.querySchema) {\n          const queryResult = this.config.querySchema.safeParse(query);\n          if (!queryResult.success) {\n            throw new InternalRouteHandlerError(\n              JSON.stringify({ message: 'Invalid query', errors: queryResult.error.issues }),\n            );\n          }\n          query = queryResult.data;\n        }\n\n        // Validate the body against the provided schema\n        if (this.config.bodySchema) {\n          const bodyResult = this.config.bodySchema.safeParse(body);\n          if (!bodyResult.success) {\n            throw new InternalRouteHandlerError(\n              JSON.stringify({ message: 'Invalid body', errors: bodyResult.error.issues }),\n            );\n          }\n          body = bodyResult.data;\n        }\n\n        // Validate the metadata against the provided schema\n        if (this.config.metadataSchema && metadata !== undefined) {\n          const metadataResult = this.config.metadataSchema.safeParse(metadata);\n          if (!metadataResult.success) {\n            throw new InternalRouteHandlerError(\n              JSON.stringify({ message: 'Invalid metadata', errors: metadataResult.error.issues }),\n            );\n          }\n          metadata = metadataResult.data;\n        }\n\n        // Execute middleware chain\n        let middlewareContext: TContext = {} as TContext;\n\n        const executeMiddlewareChain = async (index: number): Promise<OriginalRouteResponse<Awaited<TReturn>>> => {\n          if (index >= this.middlewares.length) {\n            try {\n              const result = await handler(request, {\n                params: params as z.output<TParams>,\n                query: query as z.output<TQuery>,\n                body: body as z.output<TBody>,\n                ctx: middlewareContext,\n                metadata: metadata as z.output<TMetadata>,\n              });\n\n              if (result instanceof Response) return result as OriginalRouteResponse<Awaited<TReturn>>;\n\n              return new Response(JSON.stringify(result), {\n                status: 200,\n                headers: { 'Content-Type': 'application/json' },\n              }) as OriginalRouteResponse<Awaited<TReturn>>;\n            } catch (error) {\n              return handleError(error as Error, this.handleServerError);\n            }\n          }\n\n          const middleware = this.middlewares[index];\n          if (!middleware) return executeMiddlewareChain(index + 1);\n\n          const next: NextFunction<TContext> = async (options = {}) => {\n            if (options.ctx) {\n              middlewareContext = { ...middlewareContext, ...options.ctx };\n            }\n            const result = await executeMiddlewareChain(index + 1);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return result as MiddlewareResult<any>;\n          };\n\n          try {\n            const result = await middleware({\n              request,\n              params: params as z.output<TParams>,\n              query: query as z.output<TQuery>,\n              body: body as z.output<TBody>,\n              ctx: middlewareContext,\n              metadata,\n              next,\n            });\n\n            if (result instanceof Response) return result as OriginalRouteResponse<Awaited<TReturn>>;\n\n            middlewareContext = { ...middlewareContext };\n            return result;\n          } catch (error) {\n            return handleError(error as Error, this.handleServerError);\n          }\n        };\n\n        return executeMiddlewareChain(0);\n      } catch (error) {\n        return handleError(error as Error, this.handleServerError);\n      }\n    };\n  }\n}\n\nconst handleError = <TReturn>(\n  error: Error,\n  handleServerError?: HandlerServerErrorFn,\n): OriginalRouteResponse<Awaited<TReturn>> => {\n  if (error instanceof InternalRouteHandlerError) {\n    return new Response(error.message, { status: 400 }) as OriginalRouteResponse<Awaited<TReturn>>;\n  }\n\n  if (handleServerError) {\n    return handleServerError(error as Error) as OriginalRouteResponse<Awaited<TReturn>>;\n  }\n\n  return new Response(JSON.stringify({ message: 'Internal server error' }), {\n    status: 500,\n  }) as OriginalRouteResponse<Awaited<TReturn>>;\n};\n","import { RouteHandlerBuilder } from './routeHandlerBuilder';\nimport type { HandlerFormData, HandlerServerErrorFn } from './types';\n\nexport function createZodRoute(params?: {\n  handleServerError?: HandlerServerErrorFn;\n  handleFormData?: HandlerFormData;\n}) {\n  return new RouteHandlerBuilder({\n    handleServerError: params?.handleServerError,\n    handleFormData: params?.handleFormData,\n    contextType: {},\n  });\n}\n"],"mappings":"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","names":["InternalRouteHandlerError","message","RouteHandlerBuilder","_RouteHandlerBuilder","config","middlewares","handleServerError","handleFormData","contextType","metadataValue","schema","value","middleware","handler","request","context","url","params","query","key","values","metadata","body","contentType","formData","error","paramsResult","queryResult","bodyResult","metadataResult","middlewareContext","executeMiddlewareChain","index","result","handleError","next","options","createZodRoute","params","RouteHandlerBuilder"]}